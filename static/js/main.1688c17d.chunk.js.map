{"version":3,"sources":["Components/card/card.jsx","Components/card-list/card-list.jsx","Components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","onChange","handleChange","App","state","searchFilter","fetch","then","response","json","setState","filteredMonsters","this","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAGaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAA6BL,EAAMI,QAAQE,KAA3C,MAASN,EAAMI,QAAQC,QCNhBE,G,MAAW,SAACP,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMQ,SAASC,KAAI,SAACL,GACnB,OAAO,cAAC,EAAD,CAAMA,QAASA,WCLjBM,G,MAAY,SAACV,GACxB,OACE,qBAAKC,UAAU,SAAf,SACE,uBAAOU,YAAaX,EAAMW,YAAaC,SAAUZ,EAAMa,mBCiC9CC,G,wDAjCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXP,SAAU,GACVQ,aAAc,IAJJ,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACV,GAAD,OAAc,EAAKa,SAAS,CAAEb,SAAUA,S,oBAGlD,WAAU,IAAD,OACDc,EAAmBC,KAAKR,MAAMP,SAASgB,QAAO,SAACpB,GACnD,OAAOA,EAAQE,KACZmB,cACAC,SAAS,EAAKX,MAAMC,aAAaS,kBAEtC,OACE,gCACE,oBAAIxB,UAAU,UAAd,8BACA,cAAC,EAAD,CACEU,YAAY,iBACZE,aAAc,SAACc,GAAD,OAAO,EAAKN,SAAS,CAAEL,aAAcW,EAAEC,OAAOC,WAE9D,cAAC,EAAD,CAAUrB,SAAUc,W,GA5BVQ,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1688c17d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2 key={props.monster.id}> {props.monster.name} </h2>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card\";\r\nimport \"./card-list.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => {\r\n        return <Card monster={monster} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.css\";\r\n\r\nexport const SearchBox = (props) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input placeholder={props.placeholder} onChange={props.handleChange} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./Components/card-list/card-list\";\nimport { SearchBox } from \"./Components/search-box/search-box\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchFilter: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\")\n      .then((response) => response.json())\n      .then((monsters) => this.setState({ monsters: monsters }));\n  }\n\n  render() {\n    const filteredMonsters = this.state.monsters.filter((monster) => {\n      return monster.name\n        .toLowerCase()\n        .includes(this.state.searchFilter.toLowerCase());\n    });\n    return (\n      <div>\n        <h1 className=\"heading\"> Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search monster\"\n          handleChange={(e) => this.setState({ searchFilter: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}